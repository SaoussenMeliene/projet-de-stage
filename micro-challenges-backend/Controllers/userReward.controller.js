const UserReward = require("../Models/UserReward");
const User = require("../Models/User");
const Participant = require("../models/Participant");
const mongoose = require("mongoose");

// √âchanger une r√©compense contre des points
exports.claimReward = async (req, res) => {
  try {
    const { rewardId, rewardName, rewardDescription, pointsRequired } = req.body;
    
    if (!req.user) {
      return res.status(401).json({ error: "Utilisateur non authentifi√©" });
    }
    
    const userId = req.user.userId;

    // Calculer les points totaux de l'utilisateur - Convertir en ObjectId
    const userObjectId = new mongoose.Types.ObjectId(userId);
    
    const userParticipations = await Participant.find({ user: userObjectId });
    
    let totalPoints = 0;
    
    userParticipations.forEach(p => {
      if (p.status === 'confirm√©') {
        const basePoints = 100; // Points de base par d√©fi termin√©
        const bonusPoints = p.score > 80 ? 50 : p.score > 60 ? 25 : 0;
        totalPoints += basePoints + bonusPoints;
      } else if (p.status === 'en attente') {
        totalPoints += 25; // Points partiels
      }
    });

    // V√©rifier que l'utilisateur a assez de points
    if (totalPoints < pointsRequired) {
      return res.status(400).json({ 
        error: "Points insuffisants", 
        message: `Vous avez ${totalPoints} points, mais ${pointsRequired} sont requis.` 
      });
    }

    // NOTE: Suppression de la v√©rification de double √©change
    // Les collaborateurs peuvent maintenant √©changer plusieurs fois la m√™me r√©compense
    // Cette modification permet une plus grande flexibilit√© dans l'utilisation des points
    // Cr√©er l'enregistrement d'√©change
    const newUserReward = new UserReward({
      userId,
      rewardName,
      rewardDescription,
      pointsSpent: pointsRequired,
      rewardId,
      status: 'claimed'
    });

    await newUserReward.save();

    res.status(201).json({
      success: true,
      message: `üéâ F√©licitations ! Vous avez √©chang√© "${rewardName}" pour ${pointsRequired} points !`,
      reward: newUserReward,
      remainingPoints: totalPoints - pointsRequired
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'√©change de la r√©compense:', error);
    res.status(500).json({ 
      error: "Erreur serveur", 
      message: "Impossible d'√©changer la r√©compense pour le moment."
    });
  }
};

// R√©cup√©rer les r√©compenses √©chang√©es par un utilisateur
exports.getUserClaimedRewards = async (req, res) => {
  try {
    const userId = req.user.id;

    const claimedRewards = await UserReward.find({ userId })
      .sort({ exchangedAt: -1 }); // Plus r√©cent d'abord

    console.log(`üìã ${claimedRewards.length} r√©compenses √©chang√©es r√©cup√©r√©es pour l'utilisateur ${userId}`);

    res.status(200).json({
      success: true,
      claimedRewards: claimedRewards
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©compenses √©chang√©es:', error);
    res.status(500).json({ 
      error: "Erreur serveur", 
      claimedRewards: []
    });
  }
};

// Supprimer une r√©compense √©chang√©e (admin uniquement)
exports.deleteClaimedReward = async (req, res) => {
  try {
    const { rewardId } = req.params;

    await UserReward.findByIdAndDelete(rewardId);

    res.status(200).json({
      success: true,
      message: "R√©compense √©chang√©e supprim√©e avec succ√®s"
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression de la r√©compense √©chang√©e:', error);
    res.status(500).json({ 
      error: "Erreur serveur" 
    });
  }
};