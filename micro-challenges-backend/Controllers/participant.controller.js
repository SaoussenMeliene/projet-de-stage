const Participant = require("../Models/Participant");
const Challenge = require("../Models/Challenge");
const Group = require("../Models/Group");
const Proof = require("../Models/Proof");

exports.joinChallenge = async (req, res) => {
  try {
    const challengeId = req.params.challengeId;
    const userId = req.user.userId;

    console.log(`üéØ Tentative de rejoindre le d√©fi ${challengeId} par l'utilisateur ${userId}`);

    // V√©rifier si le d√©fi existe
    const challenge = await Challenge.findById(challengeId);
    if (!challenge) {
      return res.status(404).json({ msg: "D√©fi introuvable" });
    }

    // V√©rifier si le participant existe d√©j√†
    const existing = await Participant.findOne({ user: userId, challenge: challengeId });
    if (existing) {
      console.log(`‚ÑπÔ∏è L'utilisateur ${userId} est d√©j√† inscrit au d√©fi ${challengeId}`);
      
      // M√™me si d√©j√† inscrit, v√©rifier le groupe
      let group = await Group.findOne({ challenge: challengeId });
      if (group && !group.members.some(memberId => memberId.toString() === userId.toString())) {
        console.log(`üë• Ajout de l'utilisateur au groupe existant (√©tait inscrit mais pas dans le groupe)`);
        group.members.push(userId);
        await group.save();
      }
      
      return res.status(200).json({ 
        msg: "D√©j√† inscrit √† ce d√©fi",
        groupId: group?._id 
      });
    }

    // Cr√©er un nouveau participant
    console.log(`üìù Cr√©ation d'un nouveau participant pour le d√©fi ${challenge.title}`);
    const participant = await Participant.create({
      user: userId,
      challenge: challengeId,
      status: 'en attente' // En attente jusqu'√† soumission et validation de preuve
    });

    //  GESTION DU GROUPE DE DISCUSSION
    console.log(`üîç Recherche du groupe pour le d√©fi ${challengeId}`);
    let group = await Group.findOne({ challenge: challengeId });

    if (!group) {
      // Cr√©er le groupe s'il n'existe pas encore
      console.log(`üìù Cr√©ation d'un nouveau groupe pour le d√©fi: ${challenge.title}`);
      group = await Group.create({
        name: `Groupe du d√©fi : ${challenge.title}`,
        challenge: challengeId,
        members: [userId],
        description: `Groupe de discussion pour le d√©fi "${challenge.title}"`
      });
      console.log(`‚úÖ Groupe cr√©√© avec l'ID: ${group._id}`);
    } else {
      // V√©rifier si l'utilisateur est d√©j√† membre
      const isMember = group.members.some(memberId => memberId.toString() === userId.toString());
      if (!isMember) {
        console.log(`üë• Ajout de l'utilisateur ${userId} au groupe existant ${group._id}`);
        group.members.push(userId);
        await group.save();
        console.log(`‚úÖ Utilisateur ajout√© au groupe. Nombre total de membres: ${group.members.length}`);
      } else {
        console.log(`‚ÑπÔ∏è L'utilisateur ${userId} est d√©j√† membre du groupe ${group._id}`);
      }
    }

    //  R√©ponse finale
    console.log(`üéâ D√©fi rejoint avec succ√®s! Participant: ${participant._id}, Groupe: ${group._id}`);
    res.status(201).json({
      msg: "D√©fi rejoint avec succ√®s. Vous avez √©t√© ajout√© au groupe de discussion. N'oubliez pas de soumettre une preuve pour valider votre participation !",
      participant,
      groupId: group._id,
      groupName: group.name,
      needsProof: true // Indique qu'une preuve est requise
    });

  } catch (err) {
    console.error("‚ùå Erreur joinChallenge:", err);
    res.status(500).json({ msg: "Erreur serveur", error: err.message });
  }
};

// Fonction pour quitter un d√©fi
exports.leaveChallenge = async (req, res) => {
  try {
    const challengeId = req.params.challengeId;
    const userId = req.user.userId;

    console.log(`üö™ Tentative de quitter le d√©fi ${challengeId} par l'utilisateur ${userId}`);

    // Supprimer la participation
    const participant = await Participant.findOneAndDelete({ 
      user: userId, 
      challenge: challengeId 
    });

    if (!participant) {
      return res.status(404).json({ msg: "Participation introuvable" });
    }

    // Supprimer les preuves associ√©es √† cette participation
    try {
      await Proof.deleteMany({ participant: participant._id });
      console.log(`üóëÔ∏è Preuves supprim√©es pour le participant ${participant._id}`);
    } catch (e) {
      console.warn(`‚ö†Ô∏è Impossible de supprimer les preuves du participant ${participant._id}:`, e.message);
    }

    // Retirer l'utilisateur du groupe de discussion
    const group = await Group.findOne({ challenge: challengeId });
    if (group) {
      const memberIndex = group.members.findIndex(memberId => memberId.toString() === userId.toString());
      if (memberIndex > -1) {
        group.members.splice(memberIndex, 1);
        await group.save();
        console.log(`üë• Utilisateur retir√© du groupe. Membres restants: ${group.members.length}`);
      }
    }

    console.log(`‚úÖ D√©fi quitt√© avec succ√®s`);
    res.status(200).json({
      msg: "D√©fi quitt√© avec succ√®s. Vous avez √©t√© retir√© du groupe de discussion."
    });

  } catch (err) {
    console.error("‚ùå Erreur leaveChallenge:", err);
    res.status(500).json({ msg: "Erreur serveur", error: err.message });
  }
};

// Obtenir les participants d'un d√©fi
exports.getChallengeParticipants = async (req, res) => {
  try {
    const challengeId = req.params.challengeId;

    const participants = await Participant.find({ challenge: challengeId })
      .populate('user', 'username email firstName lastName profileImage')
      .sort({ createdAt: -1 });

    res.status(200).json({
      participants,
      count: participants.length
    });

  } catch (err) {
    console.error("‚ùå Erreur getChallengeParticipants:", err);
    res.status(500).json({ msg: "Erreur serveur", error: err.message });
  }
};

// Obtenir les d√©fis auxquels un utilisateur participe
exports.getUserParticipations = async (req, res) => {
  try {
    const userId = req.user.userId;

    const participations = await Participant.find({ user: userId })
      .populate('challenge', 'title description category startDate endDate image coverImage')
      .sort({ createdAt: -1 });

    res.status(200).json({
      participations,
      count: participations.length
    });

  } catch (err) {
    console.error("‚ùå Erreur getUserParticipations:", err);
    res.status(500).json({ msg: "Erreur serveur", error: err.message });
  }
};