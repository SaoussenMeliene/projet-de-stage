require('dotenv').config();
const mongoose = require('mongoose');
const Challenge = require('../Models/Challenge');
const Participant = require('../Models/Participant');
const Group = require('../Models/Group');
const User = require('../Models/User');

async function testParticipation() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Trouver un d√©fi existant
    const challenge = await Challenge.findOne().limit(1);
    if (!challenge) {
      console.log('‚ùå Aucun d√©fi trouv√©');
      return;
    }

    console.log(`üìã D√©fi trouv√©: "${challenge.title}" (ID: ${challenge._id})`);

    // Trouver un utilisateur
    const user = await User.findOne({ role: { $ne: 'admin' } }).limit(1);
    if (!user) {
      console.log('‚ùå Aucun utilisateur trouv√©');
      return;
    }

    console.log(`üë§ Utilisateur trouv√©: "${user.username}" (ID: ${user._id})`);

    // V√©rifier s'il y a d√©j√† une participation
    let participant = await Participant.findOne({ 
      user: user._id, 
      challenge: challenge._id 
    });

    if (participant) {
      console.log('‚ÑπÔ∏è Participation existante trouv√©e');
    } else {
      // Cr√©er une participation
      console.log('üìù Cr√©ation d\'une nouvelle participation...');
      participant = await Participant.create({
        user: user._id,
        challenge: challenge._id,
        status: 'confirm√©'
      });
      console.log('‚úÖ Participation cr√©√©e');
    }

    // V√©rifier le groupe
    let group = await Group.findOne({ challenge: challenge._id });
    
    if (!group) {
      console.log('üìù Cr√©ation d\'un nouveau groupe...');
      group = await Group.create({
        name: `Groupe du d√©fi : ${challenge.title}`,
        challenge: challenge._id,
        members: [user._id],
        description: `Groupe de discussion pour le d√©fi "${challenge.title}"`
      });
      console.log(`‚úÖ Groupe cr√©√©: "${group.name}" (ID: ${group._id})`);
    } else {
      const isMember = group.members.some(memberId => memberId.toString() === user._id.toString());
      if (!isMember) {
        console.log('üë• Ajout de l\'utilisateur au groupe existant...');
        group.members.push(user._id);
        await group.save();
        console.log('‚úÖ Utilisateur ajout√© au groupe');
      } else {
        console.log('‚ÑπÔ∏è L\'utilisateur est d√©j√† membre du groupe');
      }
    }

    // Afficher les statistiques finales
    const totalParticipants = await Participant.countDocuments({ challenge: challenge._id });
    const totalMembers = group.members.length;

    console.log('\nüìä Statistiques finales:');
    console.log(`   - Participants au d√©fi: ${totalParticipants}`);
    console.log(`   - Membres du groupe: ${totalMembers}`);
    console.log(`   - Nom du groupe: "${group.name}"`);

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('‚úÖ D√©connect√© de MongoDB');
  }
}

testParticipation();