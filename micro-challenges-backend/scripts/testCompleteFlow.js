require('dotenv').config();
const mongoose = require('mongoose');
const User = require('../Models/User');
const Challenge = require('../Models/Challenge');
const jwt = require('jsonwebtoken');
const axios = require('axios');

async function testCompleteFlow() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Trouver un utilisateur et un d√©fi
    const user = await User.findOne({ username: 'leila' });
    const challenge = await Challenge.findOne({ title: { $regex: 'v√©lo', $options: 'i' } });

    if (!user || !challenge) {
      console.log('‚ùå Utilisateur ou d√©fi manquant');
      console.log('Utilisateur:', user?.username);
      console.log('D√©fi:', challenge?.title);
      return;
    }

    // G√©n√©rer un token pour l'utilisateur
    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log(`üë§ Utilisateur: ${user.username}`);
    console.log(`üìã D√©fi: ${challenge.title}`);
    console.log(`üé´ Token g√©n√©r√©\n`);

    // √âtape 1: Rejoindre le d√©fi
    console.log('üéØ √âTAPE 1: Rejoindre le d√©fi...');
    try {
      const joinResponse = await axios.post(
        `http://localhost:5000/api/participants/join/${challenge._id}`,
        {},
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log('‚úÖ D√©fi rejoint:', joinResponse.data.msg);
      if (joinResponse.data.groupId) {
        console.log(`üéâ Ajout√© au groupe: ${joinResponse.data.groupId}`);
        console.log(`üìù Nom du groupe: ${joinResponse.data.groupName || 'N/A'}`);
      }

    } catch (joinError) {
      if (joinError.response?.status === 200) {
        console.log('‚ÑπÔ∏è D√©j√† inscrit au d√©fi');
      } else {
        console.error('‚ùå Erreur lors de l\'inscription:', joinError.response?.data || joinError.message);
      }
    }

    console.log('\nüîç √âTAPE 2: R√©cup√©rer les groupes de l\'utilisateur...');
    
    // √âtape 2: R√©cup√©rer les groupes
    try {
      const groupsResponse = await axios.get(
        'http://localhost:5000/api/groups/user',
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log(`‚úÖ Groupes r√©cup√©r√©s: ${groupsResponse.data.length} groupe(s)`);
      
      groupsResponse.data.forEach((group, index) => {
        console.log(`\nüìã Groupe ${index + 1}:`);
        console.log(`   - Nom: ${group.name}`);
        console.log(`   - D√©fi: ${group.challenge?.title || 'N/A'}`);
        console.log(`   - Cat√©gorie: ${group.challenge?.category || 'N/A'}`);
        console.log(`   - Membres: ${group.stats?.totalMembers || 0}`);
        console.log(`   - Points: ${group.stats?.totalPoints || 0}`);
        console.log(`   - Participants actifs: ${group.stats?.activeParticipants || 0}`);
      });

      console.log('\nüéâ FLUX COMPLET TEST√â AVEC SUCC√àS !');
      console.log('‚úÖ L\'utilisateur peut maintenant voir ses groupes dans l\'interface "Mon Groupe"');

    } catch (groupsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des groupes:', groupsError.response?.data || groupsError.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ D√©connect√© de MongoDB');
  }
}

testCompleteFlow();