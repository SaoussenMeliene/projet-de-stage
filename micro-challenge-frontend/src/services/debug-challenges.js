// Script de d√©bogage pour diagnostiquer le probl√®me d'affichage des d√©fis
import * as challengeService from './challenges.js';

export const debugChallenges = async () => {
  console.log('üîç === DIAGNOSTIC DES CHALLENGES ===\n');

  try {
    console.log('1. Test de base - r√©cup√©ration des challenges...');
    const result = await challengeService.list();
    
    console.log('‚úÖ Appel API r√©ussi');
    console.log('üìä R√©ponse compl√®te:', JSON.stringify(result, null, 2));
    
    if (!result) {
      console.log('‚ùå PROBL√àME: Aucune r√©ponse de l\'API');
      return;
    }
    
    if (!result.challenges) {
      console.log('‚ùå PROBL√àME: Pas de propri√©t√© "challenges" dans la r√©ponse');
      console.log('Structure re√ßue:', Object.keys(result));
      return;
    }
    
    if (!Array.isArray(result.challenges)) {
      console.log('‚ùå PROBL√àME: "challenges" n\'est pas un tableau');
      console.log('Type re√ßu:', typeof result.challenges);
      return;
    }
    
    console.log(`üìà Nombre de challenges trouv√©s: ${result.challenges.length}`);
    
    if (result.challenges.length === 0) {
      console.log('‚ö†Ô∏è  PROBL√àME IDENTIFI√â: Aucun challenge dans la base de donn√©es');
      console.log('üí° Solution: Ajouter des challenges via l\'interface d\'administration');
      
      // Test des stats pour confirmer
      try {
        const stats = await challengeService.stats();
        console.log('üìä Statistiques:', JSON.stringify(stats, null, 2));
      } catch (statsError) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration des stats:', statsError.message);
      }
    } else {
      console.log('‚úÖ Challenges trouv√©s:');
      result.challenges.forEach((challenge, index) => {
        console.log(`   ${index + 1}. ${challenge.title} (ID: ${challenge.id})`);
        console.log(`      Cat√©gorie: ${challenge.category || 'Non d√©finie'}`);
        console.log(`      Statut: ${challenge.status || 'Non d√©fini'}`);
        console.log(`      Date: ${challenge.startDate || 'Non d√©finie'}`);
      });
    }
    
    console.log(`\nüìã Informations suppl√©mentaires:`);
    console.log(`   - Page courante: ${result.currentPage || 'Non d√©finie'}`);
    console.log(`   - Nombre total: ${result.totalCount || 'Non d√©fini'}`);
    console.log(`   - Limite par page: ${result.limit || 'Non d√©finie'}`);
    
  } catch (error) {
    console.log('‚ùå ERREUR lors de l\'appel API:', error.message);
    
    if (error.response) {
      console.log('üìù D√©tails de l\'erreur:');
      console.log(`   - Status: ${error.response.status}`);
      console.log(`   - Status Text: ${error.response.statusText}`);
      console.log(`   - Data:`, error.response.data);
    } else if (error.request) {
      console.log('üìù Probl√®me de r√©seau:');
      console.log('   - Pas de r√©ponse du serveur');
      console.log('   - V√©rifiez que le backend est d√©marr√© sur le port 5000');
    } else {
      console.log('üìù Erreur de configuration:', error.message);
    }
  }

  console.log('\nüîß === TESTS COMPL√âMENTAIRES ===\n');

  // Test avec diff√©rents param√®tres
  const testParams = [
    { name: 'Tous les statuts', params: { status: 'all' } },
    { name: 'Statut actif', params: { status: 'active' } },
    { name: 'Premi√®re page', params: { page: 1 } },
    { name: 'Limite √©lev√©e', params: { limit: 50 } },
  ];

  for (const test of testParams) {
    try {
      console.log(`üß™ Test: ${test.name}`);
      const result = await challengeService.list(test.params);
      console.log(`   R√©sultat: ${result.challenges?.length || 0} challenges`);
    } catch (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`);
    }
  }

  console.log('\nüí° === RECOMMANDATIONS ===\n');
  console.log('Si aucun challenge n\'est trouv√©:');
  console.log('1. V√©rifiez la base de donn√©es backend');
  console.log('2. Cr√©ez quelques challenges de test');
  console.log('3. V√©rifiez les filtres par d√©faut dans le frontend');
  console.log('4. Contr√¥lez les dates de d√©but/fin des challenges existants');
};

// Fonction utilitaire pour tester depuis la console du navigateur
window.debugChallenges = debugChallenges;